{"timestamp": 1720381524.567263, "stored_source_code": "md_reference_data = None\nupstream = None\nproduct = None\n# R23 - MD alignment and RMSD extraction \n\n## Contents\n\n1. Alignment\n2. RMSD\n3. RMSD against average structure\n4. RMSD over subunit\n5. RMSF\n## Alignment and preparation\nfrom mdtools.mapping import map_alignment_to_structure, align_structure_sequences\nimport MDAnalysis as mda\nfrom MDAnalysis.analysis import rms, align\nfrom pyfamsa import Aligner, Sequence\nimport json\nimport pandas as pd\nimport prody as pdy\n#matplotlib.rcParams['fontname'] = \"Arial\"\ndef load_trajectory(code, data, path):\n    \n    \"\"\"\n    loads the following files\n    - an MDAnalysis trajectory with the dried (water-removed) dcd\n    - an MDAnalysis Universe with the starting PDB (jic)\n    - an prody with the starting PDB (pretty useful when MDAnalysis fails)\n    \"\"\"\n    return dict(\n        code=code,\n        trajectory_dry = mda.Universe(\n            path + data['dry_pdb'], \n            path + data['dry_dcd'], \n            frames='all', in_memory=True\n        ),\n        reference_pdy=pdy.parsePDB(path + data['dry_pdb']),\n        reference=mda.Universe(\n            path + data['dry_pdb']\n        ),\n        time=data['time']\n    )\n\nLoading all the simulations.\npath = '../../../simulations/'\nexp01_md = []\nfor key, items in md_reference_data.items():\n    print(f\"-- code {key}\", end='')\n    exp01_md.append(load_trajectory(\n        code=key, data=items, path=path\n    ))\n    print(f\" loaded\")\nexp01_md = pd.DataFrame.from_records(exp01_md).set_index('code')\n## RMSD calculations\n\nWe compute the RMSD of:\n- All the alpha carbons.\n- Large subunit alpha carbons\n- Small subunit alpha carbons\n- Upper and lower large subunit alpha carbons\n- Upper and lower small subunit alpha carbons\nexp01_rmsd = []\n\nupper_ssu = 'name CA and (segid B or segid F or segid J or segid N)'\nlower_ssu = 'name CA and (segid D or segid H or segid L or segid P)'\nssu = 'name CA and (segid B or segid F or segid J or segid N or segid D or segid H or segid L or segid P)'\nupper_lsu = 'name CA and (segid A or segid E or segid I or segid M)'\nlower_lsu = 'name CA and (segid C or segid G or segid K or segid O)'\nlsu = 'name CA and (segid A or segid E or segid I or segid M or segid C or segid G or segid K or segid O)'\n\n\nfor key, item in exp01_md.iterrows():\n    print(f\"-- code {key}\", end='')\n    R = rms.RMSD(item['trajectory_dry'], item['reference'], select='name CA', groupselections=[upper_ssu, lower_ssu, ssu, upper_lsu, lower_lsu, lsu], superposition=False)\n    results = R.run()\n    tmp = pd.DataFrame(results.rmsd, columns=['frame', 'time', 'CA', 'upperSSU', 'lowerSSU', 'ssu', 'upperLSU', 'lowerLSU', 'lsu'])\n    tmp['code'] = key\n    exp01_rmsd.append(tmp)\n    print(f\" aligned\")\n    \nexp01_rmsd = pd.concat(exp01_rmsd)\nexp01_rmsd.index = pd.MultiIndex.from_arrays([exp01_rmsd['code'], exp01_rmsd['frame']])\nexp01_rmsd['frame'] = exp01_rmsd['frame'].astype(int)\nexp01_rmsd['time'] = exp01_rmsd['time'].astype(float)\nexp01_rmsd['time_ns'] = exp01_rmsd['time'] / 10\nWe only make measurements using the last 50ns of each simulation, counting the previous 25 to 50ns as burn-in time.\nexp01_rmsd['time_to_end'] = exp01_rmsd.groupby(level='code')['time_ns'].transform(\n    lambda x: x.max() - x\n)\nexp01_rmsd.query('time_to_end < 50')['time_ns']\nDumping values to file.\nexp01_rmsd.to_csv(product['rmsd'], index=None)\n### RMSD over subunits\n\nWe compute the average structure RMSD by subunits.\n\nFirst, we need to generate all the average subunits.\nlsu_A = 'name CA and segid A'\nlsu_E = 'name CA and segid E'\nlsu_I = 'name CA and segid I'\nlsu_M = 'name CA and segid M'\nlsu_C = 'name CA and segid C'\nlsu_G = 'name CA and segid G'\nlsu_K = 'name CA and segid K'\nlsu_O = 'name CA and segid O'\n\nssu_B = 'name CA and segid B'\nssu_F = 'name CA and segid F'\nssu_J = 'name CA and segid J'\nssu_N = 'name CA and segid N'\nssu_D = 'name CA and segid D'\nssu_H = 'name CA and segid H'\nssu_L = 'name CA and segid L'\nssu_P = 'name CA and segid P'\n\nlsu = 'name CA and (segid A or segid E or segid I or segid M or segid C or segid G or segid K or segid O)'\nssu = 'name CA and (segid B or segid F or segid J or segid N or segid D or segid H or segid L or segid P)'\n\nselection_strings = dict(\n    overall = 'name CA',\n    ssu=ssu, \n    lsu=lsu,\n    lsu_A = lsu_A,\n    lsu_E = lsu_E,\n    lsu_I = lsu_I,\n    lsu_M = lsu_M,\n    lsu_C = lsu_C,\n    lsu_G = lsu_G,\n    lsu_K = lsu_K,\n    lsu_O = lsu_O,\n    ssu_B = ssu_B,\n    ssu_F = ssu_F,\n    ssu_J = ssu_J,\n    ssu_N = ssu_N,\n    ssu_D = ssu_D,\n    ssu_H = ssu_H,\n    ssu_L = ssu_L,\n    ssu_P = ssu_P\n)\naverage_structures = dict(\n    overall=[],\n    ssu=[],\n    lsu=[],\n    lsu_A=[],\n    lsu_E=[],\n    lsu_I=[],\n    lsu_M=[],\n    lsu_C=[],\n    lsu_G=[],\n    lsu_K=[],\n    lsu_O=[],\n    ssu_B=[],\n    ssu_F=[],\n    ssu_J=[],\n    ssu_N=[],\n    ssu_D=[],\n    ssu_H=[],\n    ssu_L=[],\n    ssu_P=[]\n)\n\nfor key, item in exp01_md.iterrows():\n    print(f\"-- code {key}\", end='')\n    for selection_key, selection_string in selection_strings.items():\n        try:\n            average = align.AverageStructure(\n                item['trajectory_dry'], item['trajectory_dry'], \n                select=selection_string, ref_frame=0\n            ).run()\n        except ValueError:\n            average_structures[selection_key].append(None)\n            continue\n\n        ref = average.results.universe\n        average_structures[selection_key].append(ref)\n    print(\" aligned\")\n\nexp01_md['overall_avg'] = average_structures['overall']\nexp01_md['ssu_avg'] = average_structures['ssu']\nexp01_md['lsu_avg'] = average_structures['lsu']\n\nexp01_md['lsu_A'] = average_structures['lsu_A']\nexp01_md['lsu_E'] = average_structures['lsu_E']\nexp01_md['lsu_I'] = average_structures['lsu_I']\nexp01_md['lsu_M'] = average_structures['lsu_M']\nexp01_md['lsu_C'] = average_structures['lsu_C']\nexp01_md['lsu_G'] = average_structures['lsu_G']\nexp01_md['lsu_K'] = average_structures['lsu_K']\nexp01_md['lsu_O'] = average_structures['lsu_O']\n\nexp01_md['ssu_B'] = average_structures['ssu_B']\nexp01_md['ssu_F'] = average_structures['ssu_F']\nexp01_md['ssu_J'] = average_structures['ssu_J']\nexp01_md['ssu_N'] = average_structures['ssu_N']\nexp01_md['ssu_D'] = average_structures['ssu_D']\nexp01_md['ssu_H'] = average_structures['ssu_H']\nexp01_md['ssu_L'] = average_structures['ssu_L']\nexp01_md['ssu_P'] = average_structures['ssu_P']\nComputing the RMSD over the different subunit structures.\nexp01_rmsd_avg = []\noverall = 'name CA'\n\nfor key, item in exp01_md.iterrows():\n    print(f\"-- code {key}\", end='')\n    R = rms.RMSD(item['trajectory_dry'], item['overall_avg'], select='name CA', groupselections=[ssu, lsu, lsu_A, lsu_E, lsu_I, lsu_M, lsu_C, lsu_G, lsu_K, lsu_O, ssu_B, ssu_F, ssu_J, ssu_N, ssu_D, ssu_H, ssu_L, ssu_P], superposition=True)\n    results = R.run()\n    tmp = pd.DataFrame(results.rmsd, columns=['frame', 'time', 'CA', 'ssu', 'lsu', 'lsu_A', 'lsu_E', 'lsu_I', 'lsu_M', 'lsu_C', 'lsu_G', 'lsu_K', 'lsu_O', 'ssu_B', 'ssu_F', 'ssu_J', 'ssu_N', 'ssu_D', 'ssu_H', 'ssu_L', 'ssu_P'])\n    tmp['code'] = key\n    \n    exp01_rmsd_avg.append(tmp)\n    print(\" aligned\")\n    \nexp01_rmsd_avg = pd.concat(exp01_rmsd_avg)\nexp01_rmsd_avg.index = pd.MultiIndex.from_arrays([exp01_rmsd_avg['code'], exp01_rmsd_avg['frame']])\nexp01_rmsd_avg['frame'] = exp01_rmsd_avg['frame'].astype(int)\nexp01_rmsd_avg['time'] = exp01_rmsd_avg['time'].astype(float)\nexp01_rmsd_avg['time_ns'] = exp01_rmsd_avg['time'] / 10\nexp01_rmsd_avg['time_to_end'] = exp01_rmsd_avg.groupby(level='code')['time_ns'].transform(\n    lambda x: x.max() - x\n)\nexp01_rmsd_avg.query('time_to_end < 50')['time_ns']\nexp01_rmsd_avg.to_csv(\n    product['avg_rmsd'], index=None\n)", "params": {"md_reference_data": {"1bwv": {"dry_dcd": "1bwv.exp01.md01.dry.dcd", "dry_pdb": "1bwv.exp01.md01.dry.pdb", "time": "extant"}, "3zxw": {"dry_dcd": "3zxw.exp01.md01.dry.dcd", "dry_pdb": "3zxw.exp01.md01.dry.pdb", "time": "extant"}, "6ftl": {"dry_dcd": "6ftl.exp01.md01.dry.dcd", "dry_pdb": "6ftl.exp01.md01.dry.pdb", "time": "extant"}, "6ura": {"dry_dcd": "6ura.exp01.md01.dry.dcd", "dry_pdb": "6ura.exp01.md01.dry.pdb", "time": "extant"}, "8ruc": {"dry_dcd": "8ruc.exp01.md01.dry.dcd", "dry_pdb": "8ruc.exp01.md01.dry.pdb", "time": "extant"}, "anci": {"dry_dcd": "anci.exp01.md01.dry.dcd", "dry_pdb": "anci.exp01.md01.dry.pdb", "time": "ancient"}, "anciab": {"dry_dcd": "anciab.exp01.md01.dry.dcd", "dry_pdb": "anciab.exp01.md01.dry.pdb", "time": "ancient"}, "ancicd": {"dry_dcd": "ancicd.exp01.md01.dry.dcd", "dry_pdb": "ancicd.exp01.md01.dry.pdb", "time": "ancient"}, "ancia": {"dry_dcd": "ancia.exp01.md01.dry.dcd", "dry_pdb": "ancia.exp01.md01.dry.pdb", "time": "ancient"}, "ancib": {"dry_dcd": "ancib.exp01.md01.dry.dcd", "dry_pdb": "ancib.exp01.md01.dry.pdb", "time": "ancient"}, "anciip": {"dry_dcd": "anciip.exp01.md01.dry.dcd", "dry_pdb": "anciip.exp01.md01.dry.pdb", "time": "ancient"}, "ancip": {"dry_dcd": "ancip.exp01.md01.dry.dcd", "dry_pdb": "ancip.exp01.md01.dry.realigned.pdb", "time": "ancient"}}}}